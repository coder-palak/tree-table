{"version":3,"file":"ng-material-treetable.js.map","sources":["ng://ng-material-treetable/src/app/treetable/services/tree/tree.service.ts","ng://ng-material-treetable/src/app/treetable/services/validator/validator.service.ts","ng://ng-material-treetable/src/app/treetable/services/converter/converter.service.ts","ng://ng-material-treetable/src/app/treetable/default.options.ts","ng://ng-material-treetable/src/app/treetable/decorators/required.decorator.ts","ng://ng-material-treetable/src/app/treetable/component/treetable.component.ts","ng://ng-material-treetable/src/app/treetable/treetable.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Node, SearchableNode, NodeInTree } from '../../models';\nimport { cloneDeep } from 'lodash-es';\nimport { Option, some, none } from 'fp-ts/lib/Option';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TreeService {\n\n  /**\n   * Traverse a tree data structure and applies the provided @param f function\n   * to all nodes\n   * @param root the tree to be traversed\n   * @param f the function to be applied to all nodes\n   * N.B. this function modifies the existing tree\n   */\n  traverse<T, K extends Node<T>>(root: K, f: (node: K) => void): void {\n    this._traverse(root, (node: K) => {\n      f(node);\n      return true;\n    });\n  }\n\n  /**\n   * Search a tree for a node with the provided @param id\n   * @param root the tree to be searched\n   * @param id the id of the node to be retrieved\n   */\n  searchById<T, K extends SearchableNode<T>>(root: K, id: string): Option<NodeInTree<T>> {\n    let matchingNode: K;\n    const pathToRoot: {[k: string]: K} = {};\n    this._traverse(root, (node: K) => {\n      node.children.forEach(child => {\n        pathToRoot[child.id] = node;\n      });\n      if (node.id === id) {\n        matchingNode = node;\n      }\n      return node.id !== id;\n    });\n    return matchingNode ? some({\n      id: matchingNode.id,\n      value: matchingNode.value,\n      children: matchingNode.children,\n      pathToRoot: this.buildPath(id, pathToRoot)\n    }) : none;\n  }\n\n  /**\n   * Internal function that can be used to traverse or search the tree\n   * @param root the tree to be scanned\n   * @param f an optional function to be applied to all nodes\n   */\n  private _traverse<T, K extends Node<T>>(root: K, f: (node: K) => boolean): void {\n    if (!f(root)) {\n      return;\n    }\n    root.children.forEach(c => this._traverse(c, f));\n  }\n\n  /**\n   * Given a @param root tree and a @param node node, calculate the\n   * depth of the node in the tree\n   * @param root the tree\n   * @param node the node we want to calculate the depth of\n   */\n  getNodeDepth<T, K extends SearchableNode<T>>(root: K, node: K): number {\n    return this.searchById(root, node.id).fold(-1, n => n.pathToRoot.length);\n  }\n\n  /**\n   * Flatten a @param root tree into a list of its nodes\n   * @param root the tree to be flattened\n   */\n  flatten<T, K extends Node<T>>(root: K): K[] {\n    const result = [cloneDeep(root)];\n    for (let i = 0; i < result.length; i++) {\n      const node = result[i];\n      if (node.children) {\n        result.splice(result.indexOf(node) + 1, 0, ...node.children as K[]);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Internal function used to build the pathToRoot of a node in a tree\n   * @param id the id of the node\n   * @param pathMap the pathMap returned by searchById\n   */\n  private buildPath<T, K extends SearchableNode<T>>(id: string, pathMap: {[k: string]: K}): K[] {\n    const pathToRoot = [];\n    let key = id;\n    while (key) {\n      if (pathMap[key]) {\n        pathToRoot.push(pathMap[key]);\n        key = pathMap[key].id;\n      } else {\n        key = null;\n      }\n    }\n    return pathToRoot;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Node } from '../../models';\nimport { isEmpty, xor } from 'lodash-es';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidatorService {\n\n  validateCustomOrder<T, K extends Node<T>>(node: K, customColumnOrder: Array<keyof T> & string[]): { valid: boolean, xor: string[] } {\n    const xorN = xor(Object.keys(node.value), customColumnOrder);\n    return {\n      valid: isEmpty(xorN),\n      xor: xorN\n    };\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { TreeService } from '../tree/tree.service';\nimport { Node, SearchableNode, TreeTableNode } from '../../models';\nimport { cloneDeep } from 'lodash-es';\nconst uuidv4 = require('uuid/v4');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConverterService {\n\n  constructor(private treeService: TreeService) { }\n\n  /**\n   * Clone a Node<T> object and convert it to a SearchableNode<T>\n   * @param tree the node to be converted\n   */\n  toSearchableTree<T>(tree: Node<T>): SearchableNode<T> {\n    const treeClone = cloneDeep(tree) as SearchableNode<T>;\n    this.treeService.traverse(treeClone, (node: SearchableNode<T>) => {\n      node.id = node.id ? node.id : uuidv4();\n    });\n    return treeClone;\n  }\n\n  /**\n   * Clone a SearchableNode<T> object and convert it to a TreeTableNode<T>\n   * @param tree the node to be converted\n   */\n  toTreeTableTree<T>(tree: SearchableNode<T>): TreeTableNode<T> {\n    const treeClone = cloneDeep(tree) as TreeTableNode<T>;\n    this.treeService.traverse(treeClone, (node: TreeTableNode<T>) => {\n      node.depth = this.treeService.getNodeDepth(treeClone, node);\n      node.isExpanded = true;\n      node.isVisible = true;\n    });\n    return treeClone;\n  }\n\n}\n","import { Options } from './models';\n\nexport const defaultOptions: Options<any> = {\n  verticalSeparator: true,\n\thighlightRowOnHover: true,\n\televation: 5\n};\n","/**\n * Decorator that sets an Input() propertiy as required, will\n * throw an error if the property is not specified in the template.\n * I.e. @Input() @Required myProp: number;\n */\nexport function Required(target: Object, property: string): void {\n  Object.defineProperty(target, property, {\n    get() {\n      throw new Error(`Input '${property}' is required. Have you forgotten to add [${property}] = ... in your template?`);\n    },\n    set(value) {\n      Object.defineProperty(target, property, {\n        value,\n        writable: true,\n        configurable: true\n      });\n    },\n  });\n}\n","import { Component, OnInit, Input, Output, ElementRef } from '@angular/core';\nimport { Node, TreeTableNode, Options, SearchableNode } from '../models';\nimport { TreeService } from '../services/tree/tree.service';\nimport { MatTableDataSource } from '@angular/material';\nimport { ValidatorService } from '../services/validator/validator.service';\nimport { ConverterService } from '../services/converter/converter.service';\nimport { defaultOptions } from '../default.options';\nimport { flatMap, defaults } from 'lodash-es';\nimport { Required } from '../decorators/required.decorator';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'ng-treetable, treetable', // 'ng-treetable' is currently being deprecated\n  templateUrl: './treetable.component.html',\n  styleUrls: ['./treetable.component.scss']\n})\nexport class TreetableComponent<T> implements OnInit {\n  @Input() @Required tree: Node<T> | Node<T>[];\n  @Input() options: Options<T> = {};\n  @Output() nodeClicked: Subject<TreeTableNode<T>> = new Subject();\n  private searchableTree: SearchableNode<T>[];\n  private treeTable: TreeTableNode<T>[];\n  displayedColumns: string[];\n  dataSource: MatTableDataSource<TreeTableNode<T>>;\n\n  constructor(\n    private treeService: TreeService,\n    private validatorService: ValidatorService,\n    private converterService: ConverterService,\n    elem: ElementRef\n  ) {\n    const tagName = elem.nativeElement.tagName.toLowerCase();\n    if (tagName === 'ng-treetable') {\n      console.warn(`DEPRECATION WARNING: \\n The 'ng-treetable' selector is being deprecated. Please use the new 'treetable' selector`);\n    }\n  }\n\n  ngOnInit() {\n    this.tree = Array.isArray(this.tree) ? this.tree : [this.tree];\n    this.options = this.parseOptions(defaultOptions);\n    const customOrderValidator = this.validatorService.validateCustomOrder(this.tree[0], this.options.customColumnOrder);\n    if (this.options.customColumnOrder && !customOrderValidator.valid) {\n      throw new Error(`\n        Properties ${customOrderValidator.xor.map(x => `'${x}'`).join(', ')} incorrect or missing in customColumnOrder`\n      );\n    }\n    this.displayedColumns = this.options.customColumnOrder\n      ? this.options.customColumnOrder\n      : this.extractNodeProps(this.tree[0]);\n    this.searchableTree = this.tree.map(t => this.converterService.toSearchableTree(t));\n    const treeTableTree = this.searchableTree.map(st => this.converterService.toTreeTableTree(st));\n    this.treeTable = flatMap(treeTableTree, this.treeService.flatten);\n    this.dataSource = this.generateDataSource();\n  }\n\n  extractNodeProps(tree: Node<T> & { value: { [k: string]: any } }): string[] {\n    return Object.keys(tree.value).filter(x => typeof tree.value[x] !== 'object');\n  }\n\n  generateDataSource(): MatTableDataSource<TreeTableNode<T>> {\n    return new MatTableDataSource(this.treeTable.filter(x => x.isVisible));\n  }\n\n  formatIndentation(node: TreeTableNode<T>, step: number = 5): string {\n    return '&nbsp;'.repeat(node.depth * step);\n  }\n\n\tformatElevation(): string {\n\t\treturn `mat-elevation-z${this.options.elevation}`;\n\t}\n\n  onNodeClick(clickedNode: TreeTableNode<T>): void {\n    clickedNode.isExpanded = !clickedNode.isExpanded;\n    this.treeTable.forEach(el => {\n      el.isVisible = this.searchableTree.every(st => {\n        return this.treeService.searchById(st, el.id).\n          fold([], n => n.pathToRoot)\n          .every(p => this.treeTable.find(x => x.id === p.id).isExpanded);\n      });\n    });\n    this.dataSource = this.generateDataSource();\n    this.nodeClicked.next(clickedNode);\n  }\n\n  // Overrides default options with those specified by the user\n  parseOptions(defaultOpts: Options<T>): Options<T> {\n    return defaults(this.options, defaultOpts);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { TreetableComponent } from './component/treetable.component';\nexport { Node, Options} from './models';\n\n@NgModule({\n  declarations: [\n    TreetableComponent\n  ],\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatIconModule\n  ],\n  exports: [\n    TreetableComponent\n  ]\n})\nexport class TreetableModule { }\n"],"names":["tslib_1.__decorate"],"mappings":"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"}
